@using Microsoft.AspNetCore.Components.Web
@using WebCalculator.Models
@using System;
@using System.Text;
<div>
    <div class="calculator_previous_main_output">  
        @historyString
    </div>
    <div value="123" class="calculator_main_output">  
        @inputString
    </div>
    <div class="wrapper">
        <button @onclick="(() => OnOneArgumentalOperationClick(new Reverse()))" class="calculator_button calculator_operation_button">1/x</button>
        <button @onclick="(() => OnOneArgumentalOperationClick(new Square()))" class="calculator_button calculator_operation_button">x^2</button>
        <button @onclick="(() => OnOneArgumentalOperationClick(new SquareRoot()))" class="calculator_button calculator_operation_button">sqrt(x)</button>
        <button @onclick="(() => OnBiargumentalOperationClick(new Division()))" class="calculator_button calculator_operation_button">/</button>
    </div>
    <div class="wrapper">
        <button @onclick="(() => OnDigitClick('7'))" class="calculator_button">7</button>
        <button @onclick="(() => OnDigitClick('8'))" class="calculator_button">8</button>
        <button @onclick="(() => OnDigitClick('9'))" class="calculator_button">9</button>
        <button @onclick="(() => OnBiargumentalOperationClick(new Multiplication()))" class="calculator_button calculator_operation_button">*</button>
    </div>
    <div class="wrapper">
        <button @onclick="(() => OnDigitClick('4'))" class="calculator_button">4</button>
        <button @onclick="(() => OnDigitClick('5'))" class="calculator_button">5</button>
        <button @onclick="(() => OnDigitClick('6'))" class="calculator_button">6</button>
        <button @onclick="(() => OnBiargumentalOperationClick(new Difference()))" class="calculator_button calculator_operation_button">-</button>
    </div>
    <div class="wrapper">
        <button @onclick="(() => OnDigitClick('1'))" class="calculator_button">1</button>
        <button @onclick="(() => OnDigitClick('2'))" class="calculator_button">2</button>
        <button @onclick="(() => OnDigitClick('3'))" class="calculator_button">3</button>
        <button @onclick="(() => OnBiargumentalOperationClick(new Sum()))" class="calculator_button calculator_operation_button">+</button>
    </div>
    <div class="wrapper">
        <button @onclick="(() => OnDigitClick('0'))" class="calculator_button">0</button>
        <button @onclick="(() => OnDigitClick(','))" class="calculator_button">,</button>
        <button @onclick="(() => OnCalculateClick())" class="calculator_button equally_button">=</button>
        <button @onclick="(() => OnDeleteClick())" class="calculator_button calculator_operation_button">delete</button>
    </div>
</div>

@code{    
    private ICalculator calculator = new Models.Calculator();

    private StringBuilder inputString = new StringBuilder("0");
    private StringBuilder historyString = new StringBuilder("0");
    
    private double firstArgument = 0;
    private double? secondArgument = null;

    private bool isFirstInput = true;
}

@code{
    private void OnDigitClick(char digit)
    {
        if (digit == ',' && inputString.ToString().Contains(","))
            return;

        if(isFirstInput && digit != ',')
        {
            inputString.Clear().Append(digit);
        }
        else
        {
            inputString.Append(digit);
        }
        isFirstInput = false;
    }

    private void OnBiargumentalOperationClick(IBiargumentalOperation operation)
    {
        double.TryParse(inputString.ToString(), out firstArgument);

        inputString.Clear();

        historyString.Clear().Append(firstArgument.ToString()).Append(" ").Append(operation.GetSymbolString()).Append(" ");

        calculator.CurrentOperation = operation;
    }

    private void OnOneArgumentalOperationClick(IOneargumentalOperation operation)
    {
        inputString.Clear();

        //to do
        operation.Argument = firstArgument;

        calculator.CurrentOperation = operation;
        firstArgument = calculator.Calculate();

        inputString = new StringBuilder(firstArgument.ToString());
        historyString = new StringBuilder(calculator.CurrentOperation.ToString());

        isFirstInput = true;
    }

    private void OnCalculateClick()
    {
        double secondArgumentNotNull;

        if(!double.TryParse(inputString.ToString(), out secondArgumentNotNull))
        {
            secondArgument = firstArgument;
        }
        else
        {
            secondArgument = secondArgumentNotNull;
        }

        if(calculator.CurrentOperation is IOneargumentalOperation)
        {

        }
        else
        {
            IBiargumentalOperation biargumentalOperation = (IBiargumentalOperation)calculator.CurrentOperation;
            biargumentalOperation.FirstArgument = firstArgument;
            biargumentalOperation.SecondArgument = (double)secondArgument;

            firstArgument = calculator.Calculate();

            inputString = new StringBuilder(firstArgument.ToString());
            historyString = new StringBuilder(calculator.CurrentOperation.ToString());

            isFirstInput = true;

        }
    }

    private void OnDeleteClick()
    {
        if (inputString.Length > 0)
            inputString.Length--;

    }
}